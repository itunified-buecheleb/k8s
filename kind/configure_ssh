#!/bin/bash

SSH_PUBLIC_KEY="${HOME}/.ssh/kind.pub"
ROOT_PASSWORD=$(cd ~/github/itunified-buecheleb/spass/ && node src/main --getPassword --name kind_k8s_node_root)

# docker prune
docker system prune -a -f


# Function to display an error message and exit
function error_exit {
    echo "$1"
    exit 1
}

# Function to copy SSH key with retries
function copy_ssh_key {
    local node=$1
    local retries=5
    local count=0

    while [ $count -lt $retries ]; do
        docker cp ${SSH_PUBLIC_KEY} $node:/root/.ssh/authorized_keys && break
        count=$((count + 1))
        echo "Retry $count/$retries: Failed to copy SSH public key to $node"
        sleep 2
    done

    if [ $count -eq $retries ]; then
        error_exit "Failed to copy SSH public key to $node after $retries attempts"
    fi
}

# Check if the SSH public key file exists
if [ ! -f "$SSH_PUBLIC_KEY" ]; then
    error_exit "SSH public key file not found at $SSH_PUBLIC_KEY. Please provide a valid path."
fi

# Install and configure SSH on the worker nodes only
#for node in $(docker ps --filter "name=kind-" --format "{{.Names}}"); do
#for node in $(kubectl get nodes --selector='!node-role.kubernetes.io/control-plane' -o jsonpath='{range .items[*].metadata}{.name}{"\n"}{end}'); do
for node in $(kubectl get nodes -o jsonpath='{range .items[*].metadata}{.name}{"\n"}{end}'); do
    container_id=$(docker ps --filter "name=${node}" --format "{{.ID}}")
    echo "-----------------------------"
    echo $node
    echo $container_id
    echo "-----------------------------"
    
    if [ -z "$container_id" ]; then
        error_exit "Failed to find Docker container for node $node"
    fi

    docker exec -it $node apt-get update || error_exit "Failed to update package list on $node"
    docker exec -it $node  apt-get install -y openssh-server || error_exit "Failed to install openssh-server on $node"
    docker exec -it $node mkdir -p /root/.ssh || error_exit "Failed to create .ssh directory on $node"
    copy_ssh_key $node
    docker exec -it $node chown root:root /root/.ssh/authorized_keys || error_exit "Failed to set ownership of authorized_keys on $node"
    docker exec -it $node chmod 600 /root/.ssh/authorized_keys || error_exit "Failed to set permissions on authorized_keys on $node"
    echo "root:${ROOT_PASSWORD}" | docker exec -i $node chpasswd || error_exit "Failed to set root password on $node"
    docker exec -it $node sh -c "sed -i 's/^#PermitRootLogin.*/PermitRootLogin yes/' /etc/ssh/sshd_config" || error_exit "Failed to configure PermitRootLogin on $node"
    docker exec -it $node sh -c "sed -i 's/^#PasswordAuthentication.*/PasswordAuthentication yes/' /etc/ssh/sshd_config" || error_exit "Failed to configure PasswordAuthentication on $node"
    docker exec -it $node service ssh restart || error_exit "Failed to restart SSH service on $node"
done

# Forward ports for SSH access to worker nodes
index=1
for node in $(kubectl get nodes -o jsonpath='{range .items[*].metadata}{.name}{"\n"}{end}'); do
    port=222${index}
    container_id=$(docker ps --filter "name=${node}" --format "{{.ID}}")
    container_ip=$(docker inspect -f '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' $container_id)
    docker run -d --rm --name kind-ssh-proxy-${index} \
        -p ${port}:22 \
        -v /var/run/docker.sock:/var/run/docker.sock \
        alpine/socat \
        tcp-listen:22,fork,reuseaddr tcp:${container_ip}:22
    echo "Node ${node}:"
    echo "  ssh -i ~/.ssh/kind root@localhost -p ${port}"
    index=$((index + 1))
done

echo "SSH setup completed successfully."


